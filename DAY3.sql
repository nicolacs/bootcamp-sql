use sys;
use BOOTCAMP_2408;

CREATE TABLE CUSTOMERS (
	ID INTEGER PRIMARY KEY,
    CUSTOMER_NAME VARCHAR(50),
    VIP VARCHAR(1)
);

CREATE TABLE ORDERS (
	ID INTEGER PRIMARY KEY, -- UNQIUE, NOT NULL
    TOTAL_AMOUNT DECIMAL(11, 2),
    CUSTOMER_ID INTEGER,
    --  note
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID)
);

INSERT INTO CUSTOMERS VALUES (1, 'JOHN LAU', 'Y');
  -- INSERT INTO CUSTOMERS VALUES (1, 'PETER WONG', 'N'); -- PK EXISTS
INSERT INTO CUSTOMERS VALUES (2, 'PETER WONG', 'N');

INSERT INTO ORDERS VALUES(1, 100.9, 2); -- OK, CUSTOMER_ID 2 EXISTS
-- INSERT INTO ORDERS VALUES (2, 999.99, 3); -- NOT OK, CUSTOMER_ID 3 NOT EXISTS IN CUSTOMERS
INSERT INTO ORDERS VALUES(2, 999.99, 1);

-- TYPES OF TABLE
-- 1. SETUP TABLE (ADMIN SYSTEM CONTROL)
-- 2. TRANSACTION TABLE (USER ACTION)
-- 3. CUSTOMER BASED TABLE (USER ACTION)

-- SETUP TABLE (ADMIN SYSTEM CONTROL)
CREATE TABLE SETUP_DELIVERY_FEE(
	ORDER_TYPE VARCHAR(1),
    EFF_DATE DATE,
	TRAN_DATE DATE,
    AMOUNT DECIMAL(6,2),
    STATUS VARCHAR(1), -- 'A', 'I'
    PRIMARY KEY (ORDER_TYPE, EFF_DATE)
);

-- JAVA
-- CTE: SUB-QUERY
WITH MAX_EFF_DATE AS (
	SELECT MAX(EFF_DATE) AS MAX_DATE -- RESULT -> ONE ROW
	FROM SETUP_DELIVERY_FEE SDF
	WHERE SDF.ORDER_TYPE = 'C'
    AND SDF.EFF_DATE <= CURDATE() -- TODAY
    AND S.STATUS = 'A'
)
SELECT S.AMOUNT AS DELIVERY_FEE
FROM SETUP_DELIVERY_FEE S, MAX_EFF_DATE MED -- N X 1
WHERE S.ORDER_TYPE = 'C'
AND S.STATUS = 'A'
AND S.EFF_DATE = MED.MAX_DATE;

-- ALTERNATIVE: SUB-QUERY
-- THE EFFECTIVE DATE MAY COMPARE WITH SYSTEM DATE
SELECT S.AMOUNT AS DELIVERY_FEE
FROM SETUP_DELIVERY_FEE S
WHERE S.ORDER_TYPE = 'C'
AND S.STATUS = 'A'
AND S.EFF_DATE = (SELECT MAX(EFF_DATE) AS MAX_DATE -- RESULT -> ONE ROW
					FROM SETUP_DELIVERY_FEE SDF
					WHERE SDF.ORDER_TYPE = S.ORDER_TYPE
                    AND SDF.EFF_DATE <= CURDATE() -- TODAY
                    AND S.STATUS = 'A');

--
UPDATE SETUP_DELIVERY_FEE
SET STATUS = 'I'
WHERE ORDER_TYPE = 'C'
AND EFF_DATE = '2024-09-03';

-- AUTO_INCREMENT
CREATE TABLE FACULTY (
    ID INTEGER PRIMARY KEY AUTO_INCREMENT, -- DB auto find the max(id) and then + 1
    FACULTY_NAME VARCHAR(100) NOT NULL,
    FACULTY_HIRE_DATE DATE NOT NULL
);

-- Week 8 -- 12- Indexing -係一個手段令run memory既性能提升
-- Group by, oreder by, where
-- 其實得幾百行SQL 就唔洗種INDEX, 經常要用就可提昇性能
-- INSERT INTO緊既過程分類完成先RETURN 返俾我知INSERT 完成
-- 但種INTEX加快緊SELECT既性能, 所以如果SELECT多, 就種INTEX.  
-- EG, 買STOCK, WRITE 要快, 多過SELECT既需要, 就多數唔INTEX, 迁就WRITE
-- INTEX 可以DROP
-- 對內既唔會攪咁多野, 係對客既系統先會諗提升性能而種INTEX

-- 13 - VIEW

