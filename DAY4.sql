use sys;
use BOOTCAMP_2408;

CREATE TABLE STAFFS (
	ID INTEGER, -- 1,2,3,4 ...
    STAFF_NAME VARCHAR(20),
    GENDER VARCHAR(1),
    SALARY DECIMAL(11,2),
    STAFF_EMAIL VARCHAR(50),
    DEPT_CODE VARCHAR(2) -- IT, HR, MK ...
);

INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, STAFF_EMAIL, DEPT_CODE) 
	VALUES (1, 'JOHN WONG', 'M', 20000.5, 'johnwong@gmail.com', 'IT');
INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, STAFF_EMAIL, DEPT_CODE) 
	VALUES (2, 'PETER LAU', 'M', 31000.0, 'peterwong@hotmail.com', 'HR');
INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, DEPT_CODE) 
	VALUES (3, 'JENNY LAU', 'F', 25000.0, 'MK');
ALTER TABLE STAFFS ADD EMPLOYMENT_DATE DATE;
UPDATE STAFFS SET EMPLOYMENT_DATE = STR_TO_DATE('2014-08-01', '%Y-%m-%d') WHERE ID = 1;
UPDATE STAFFS SET EMPLOYMENT_DATE = STR_TO_DATE('2018-09-05', '%Y-%m-%d') WHERE ID = 2;
UPDATE STAFFS SET EMPLOYMENT_DATE = STR_TO_DATE('2019-03-31', '%Y-%m-%d') WHERE ID = 3;
INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, DEPT_CODE) 
	VALUES (4, 'VINCENT ABCDEFGHIJK ABCDEF', 'M', 15000.0, 'IT');
UPDATE STAFFS SET STAFF_EMAIL = 'vincentlau@hotmail.com' WHERE ID = 4;
    
    
-- OTHER trigger EXAMPLE
-- INSERT NEW STAFF CAN COUNT +1
DROP TRIGGER IF EXISTS DEPT_STAFF_COUNT_TRIGGER;

DELIMITER //

CREATE TRIGGER DEPT_STAFF_COUNT_TRIGGER
AFTER INSERT ON STAFFS
FOR EACH ROW
BEGIN
    DECLARE notfound INT DEFAULT 0;
    DECLARE v_dept_code VARCHAR(2);
    DECLARE v_avg_salary DECIMAL(11, 2);
    DECLARE v_found INT DEFAULT 0;

	DECLARE dept_cursor CURSOR FOR
        SELECT 1
        FROM DEPT_STAFF_COUNT
        WHERE DEPT_CODE = NEW.DEPT_CODE;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET notfound = 1;

    DELETE FROM DEPT_INFO_REPORT;

     -- Open the cursor
    OPEN dept_cursor;
    dept_loop: LOOP 
        FETCH dept_cursor INTO v_found;
        IF notfound THEN
			INSERT INTO DEPT_STAFF_COUNT (DEPT_CODE, COUNT) VALUES (NEW.DEPT_CODE, 1);
            LEAVE dept_loop;
        END IF;
        UPDATE DEPT_STAFF_COUNT SET COUNT = COUNT + 1 WHERE DEPT_CODE = NEW.DEPT_CODE;
        LEAVE dept_loop;
    END LOOP;
    CLOSE dept_cursor;
END;
//

DELIMITER ;

-- DAY 4
CREATE VIEW DEPARTMENT_EMPLOYMENT
AS
SELECT S.DEPT_CODE
, MIN(S.EMPLOYMENT_DATE) AS EARLIEST_EMPLOYMENT_DATE
, MAX(S.EMPLOYMENT_DATE) AS LATEST_EMPLOYMENT_DATE
, SUM(S.SALARY) AS TOTAL_SALARY
, COUNT(1) AS NUM_OF_STAFF
FROM STAFFS S
GROUP BY S.DEPT_CODE
;
-- SELECT VIEW
SELECT * FROM DEPARTMENT_EMPLOYMENT_STAT;  -- 唔係直接俾raw data, 而係俾整合左既data都等
-- VIEW -> REAL-TIME LOOKUP THE PHYSICAL TABLE
-- 1. NO IMPACT TO DATABASE WORKLOAD, BECAUSE THE SQL IS REAL-TIME EXECUTION
-- 2. BETTER FOR DATA SECURITY MANAGEMENT, BECAUSE TEAMS HAVE DIFFERENT DATA OWNERSHIP

-- eg, A TEAM 要整樣野俾vip 用, 但 TEAM A 唔會有CUSTOMER DATA
	-- 咁有CUSTOMER DATA 既TEAM b 就開個view <CUSTOMER_VIP_INFO> 俾TEAM A 用
    -- 即係 DATA ABSTRACTION & SECURITY
SELECT * FROM CUSTOMER_VIP_INFO;

CREATE VIEW CUSTOMER_VIP_INFO
AS
SELECT ID, VIP
FROM CUSTOMER;

-- VIEW 係可以insert 但可以寫到不能被改寫

-- 14 -- MATERIALIZED VIEW
-- insert into 一個harddisc既新table
-- REFLASH MATERIALIZED VIEW xxx; // 可能SET左時間 每hr/day 去更新一個REPORT出黎
-- REFLASH 前可留底

-- 起table係為左俾java select
-- DBA 一個職位係後面mon住security, 改密碼, 開AC

-- 15 Stored Procedure

CREATE TABLE DEPT_INFO_REPORT (
	DEPT_CODE VARCHAR(2),
	AVG_SALARY DECIMAL(11, 2)
);

DROP PROCEDURE IF EXISTS INSERT_DEPT_INFO_REPORT;

-- PROCEDURE CODE
DELIMITER // 

CREATE PROCEDURE INSERT_DEPT_INFO_REPORT() -- IN STAFF_ID INTEGER

BEGIN
	DECLARE done INT DEFAULT 0;
    DECLARE v_dept_code VARCHAR(2);
    DECLARE v_avg_salary DECIMAL(11, 2);
    
	DECLARE dept_cursor CURSOR FOR
        SELECT DEPT_CODE, ROUND(AVG(SALARY), 2)
        FROM STAFFS
        GROUP BY DEPT_CODE;
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    
    DELETE FROM DEPT_INFO_REPORT;
    
     -- Open the cursor
    OPEN dept_cursor;
    dept_loop: LOOP 
        FETCH dept_cursor INTO v_dept_code, v_avg_salary;
        IF done THEN
            LEAVE dept_loop;
        END IF;
        
        INSERT INTO DEPT_INFO_REPORT (DEPT_CODE, AVG_SALARY) VALUES (v_dept_code, v_avg_salary);
    END LOOP;
    CLOSE dept_cursor;
END;
//

DELIMITER ;

-- CALL PROCEDURE
CALL INSERT_DEPT_INFO_REPORT();
-- SELECT THE RESULT
SELECT * FROM DEPT_INFO_REPORT;


CREATE TABLE DEPT_STAFF_COUNT (
	DEPT_CODE VARCHAR(2),
    COUNT INT
);


DROP TRIGGER IF EXISTS DEPT_STAFF_COUNT_TRIGGER;

DELIMITER //

CREATE TRIGGER DEPT_STAFF_COUNT_TRIGGER
AFTER INSERT ON STAFFS
FOR EACH ROW
BEGIN
    DECLARE notfound INT DEFAULT 0;
    DECLARE v_dept_code VARCHAR(2);
    DECLARE v_avg_salary DECIMAL(11, 2);
    DECLARE v_found INT DEFAULT 0;
    
	DECLARE dept_cursor CURSOR FOR
        SELECT 1
        FROM DEPT_STAFF_COUNT
        WHERE DEPT_CODE = NEW.DEPT_CODE;
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET notfound = 1;
    
    DELETE FROM DEPT_INFO_REPORT;
    
     -- Open the cursor
    OPEN dept_cursor;
    dept_loop: LOOP 
        FETCH dept_cursor INTO v_found;
        IF notfound THEN
			INSERT INTO DEPT_STAFF_COUNT (DEPT_CODE, COUNT) VALUES (NEW.DEPT_CODE, 1);
            LEAVE dept_loop;
        END IF;
        UPDATE DEPT_STAFF_COUNT SET COUNT = COUNT + 1 WHERE DEPT_CODE = NEW.DEPT_CODE;
        LEAVE dept_loop;
    END LOOP;
    CLOSE dept_cursor;
END;
//

DELIMITER ;

INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, STAFF_EMAIL, DEPT_CODE) 
	VALUES (100, 'VINCENT WONG', 'M', 30000.5, 'VINCENTWONG@gmail.com', 'IT');
INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, STAFF_EMAIL, DEPT_CODE) 
	VALUES (101, 'SALLY WONG', 'M', 30000.5, 'SALLY@gmail.com', 'IT');
INSERT INTO STAFFS (ID, STAFF_NAME, GENDER, SALARY, STAFF_EMAIL, DEPT_CODE) 
	VALUES (102, 'BETTY WONG', 'M', 30000.5, 'BETTY@gmail.com', 'HR');
SELECT * FROM DEPT_STAFF_COUNT;
    